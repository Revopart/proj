# suite s21_comparison_tests_suite

# tcase Base_Compare_Functionality

# test base_compare_equal
s21_decimal first = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
s21_decimal second = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
int result = base_compare(first, second);
int expected = 0;
ck_assert_msg(result == expected, "\033[31mbase_compare_equal failed: result %d, expected %d\033[0m", result, expected);

# test base_compare_first_greater
s21_decimal first =  {{0b00000000000000000000000001111100, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.24
s21_decimal second = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
int result = base_compare(first, second);
int expected = 1;
ck_assert_msg(result == expected, "\033[31mbase_compare_first_greater failed: result %d, expected %d\033[0m", result, expected);

# test base_compare_first_less
s21_decimal first = {{0b00000000000000000000000001111010, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.22
s21_decimal second = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
int result = base_compare(first, second);
int expected = -1;
ck_assert_msg(result == expected, "\033[31mbase_compare_first_less failed: result %d, expected %d\033[0m", result, expected);

# tcase Is_Less_Functionality

# test s21_is_less_true
s21_decimal first = {{0b00000000000000000000000001111010, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.22
s21_decimal second = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
int result = s21_is_less(first, second);
int expected = 1;
ck_assert_msg(result == expected, "\033[31ms21_is_less_true failed: result %d, expected %d\033[0m", result, expected);

# test s21_is_less_false
s21_decimal first = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
s21_decimal second = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
int result = s21_is_less(first, second);
int expected = 0;
ck_assert_msg(result == expected, "\033[31ms21_is_less_false failed: result %d, expected %d\033[0m", result, expected);

# tcase Is_Less_Or_Equal_Functionality

# test s21_is_less_or_equal_true
s21_decimal first = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
s21_decimal second = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
int result = s21_is_less_or_equal(first, second);
int expected = 1;
ck_assert_msg(result == expected, "\033[31ms21_is_less_or_equal_true failed: result %d, expected %d\033[0m", result, expected);

# test s21_is_less_or_equal_false
s21_decimal first = {{0b00000000000000000000000001111100, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.24
s21_decimal second = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
int result = s21_is_less_or_equal(first, second);
int expected = 0;
ck_assert_msg(result == expected, "\033[31ms21_is_less_or_equal_false failed: result %d, expected %d\033[0m", result, expected);

# tcase Is_Greater_Functionality

# test s21_is_greater_true
s21_decimal first = {{0b00000000000000000000000001111100, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.24
s21_decimal second = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
int result = s21_is_greater(first, second);
int expected = 1;
ck_assert_msg(result == expected, "\033[31ms21_is_greater_true failed: result %d, expected %d\033[0m", result, expected);

# test s21_is_greater_false
s21_decimal first = {{0b00000000000000000000000001111010, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.22
s21_decimal second = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
int result = s21_is_greater(first, second);
int expected = 0;
ck_assert_msg(result == expected, "\033[31ms21_is_greater_false failed: result %d, expected %d\033[0m", result, expected);

# tcase Is_Greater_Or_Equal_Functionality

# test s21_is_greater_or_equal_true
s21_decimal first = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
s21_decimal second = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
int result = s21_is_greater_or_equal(first, second);
int expected = 1;
ck_assert_msg(result == expected, "\033[31ms21_is_greater_or_equal_true failed: result %d, expected %d\033[0m", result, expected);

# test s21_is_greater_or_equal_false
s21_decimal first = {{0b00000000000000000000000001111010, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.22
s21_decimal second = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
int result = s21_is_greater_or_equal(first, second);
int expected = 0;
ck_assert_msg(result == expected, "\033[31ms21_is_greater_or_equal_false failed: result %d, expected %d\033[0m", result, expected);

# tcase Is_Equal_Functionality

# test s21_is_equal_true
s21_decimal first = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
s21_decimal second = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
int result = s21_is_equal(first, second);
int expected = 1;
ck_assert_msg(result == expected, "\033[31ms21_is_equal_true failed: result %d, expected %d\033[0m", result, expected);

# test s21_is_equal_false
s21_decimal first = {{0b00000000000000000000000001111010, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.22
s21_decimal second = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
int result = s21_is_equal(first, second);
int expected = 0;
ck_assert_msg(result == expected, "\033[31ms21_is_equal_false failed: result %d, expected %d\033[0m", result, expected);

# tcase Is_Not_Equal_Functionality

# test s21_is_not_equal_true
s21_decimal first = {{0b00000000000000000000000001111010, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.22
s21_decimal second = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
int result = s21_is_not_equal(first, second);
int expected = 1;
ck_assert_msg(result == expected, "\033[31ms21_is_not_equal_true failed: result %d, expected %d\033[0m", result, expected);

# test s21_is_not_equal_false
s21_decimal first = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
s21_decimal second = {{0b00000000000000000000000001111011, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000100000000000000000}};  // 1.23
int result = s21_is_not_equal(first, second);
int expected = 0;
ck_assert_msg(result == expected, "\033[31ms21_is_not_equal_false failed: result %d, expected %d\033[0m", result, expected);
